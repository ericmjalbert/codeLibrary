/*****
 *
 *  Sparse matrix multipled with a vector
 *  
 *  Takes a sparse matrix and multiplies it with a vector
 *  
 *  Author:         Eric Jalbert
 *  Date Started:   June 20th, 2013
 *  Date Modified:  June 20th, 2013
 *  
 *****/ 

#include "sparseMulti.h"
 
int ** genSparseMatrix()
{
  int i = 0;
  int j = 0;
  int ** matrix = NULL;
  srand(time(0));
  
  matrix = malloc(SIZE * sizeof **matrix);
  for(i = 0; i < SIZE; i++)
  {
    matrix[i] = malloc(SIZE * sizeof *matrix);
  }
    
  for(i = 0; i < SIZE; i++)
  { 
    for(j = 0; j < SIZE; j++)
    {
      if(rand()%20 > 0)
        matrix[i][j] = 0;
      else
        matrix[i][j] = rand()%10;
    } 
  }
	
    return matrix;
}



int * genVector()
{
  int i;
  int * vector = NULL;
  srand(time(0));
  
  vector = malloc(SIZE * sizeof *vector);

  for(i = 0; i < SIZE; i++)
  {
    vector[i] = rand()%10;
  }

  return vector;
}



Sparse * covertMatrix(int ** matrix)
{
  Sparse * newMatrix = NULL;
  int i,j;
  int count = 0;
  
  for(i = 0; i < SIZE, i++)
    for(j = 0; j < SIZE, j++)
    {
      if(matrix[i][j] != 0)
      {
        newMatrix = realloc(newMatrix, sizeof *newMatrix * (count+1));
        newMatrix[count].value = matrix[i][j];
        newMatrix[count].row = i;
        newMatrix[count].col = j;
        count++;
      }
    }
    
  return newMatrix;
}


int printMatrix(int ** matrix)
{
  int i, j;
		for(i = 0; i < SIZE; i++)
		{
			for(j = 0; j < SIZE; j++)
			{
				printf("%d ", matrix[i][j]);
			}
			printf("\n");
		}
		
		return 0;
}



int printVector(int * vector)
{
  int i;
  for(i = 0; i < SIZE; i++)
    printf("%d \n", vector[i]);
    
  return 0;
}



int ** matrixTimesVector(int ** matrix, int * vector)
{
return NULL;
}



int ** sparseTimesVector(Sparse matrix, int * vector);





